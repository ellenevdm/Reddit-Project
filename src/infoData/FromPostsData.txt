 r.getBest({limit: 1})

    * @summary Gets a list of subreddits, arranged by popularity.
   * @param {object} [options] Options for the resulting Listing
   * @returns {Promise} A Listing containing Subreddits
   * @example
   *
   * r.getPopularSubreddits().then(console.log)
   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]
   */


  getPopularSubreddits(options) {
    return this._getListing({
      uri: 'subreddits/popular',
      qs: options
    });
  }

     * @summary Gets a list of default subreddits.
   * @param {object} [options] Options for the resulting Listing
   * @returns {Promise} A Listing containing Subreddits
   * @example
   *
   * r.getDefaultSubreddits().then(console.log)
   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]
   */


  getDefaultSubreddits(options) {
    return this._getListing({
      uri: 'subreddits/default',
      qs: options
    });
  }


  * @summary Gets a list of gold-exclusive subreddits.
   * @param {object} [options] Options for the resulting Listing
   * @returns {Promise} A Listing containing Subreddits
   * @example
   *
   * r.getGoldSubreddits().then(console.log)
   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]
   */


  getGoldSubreddits(options) {
    return this._getListing({
      uri: 'subreddits/gold',
      qs: options
    });
  }
  * @summary Gets a list of subreddits, arranged by age.
   * @param {object} [options] Options for the resulting Listing
   * @returns {Promise} A Listing containing Subreddits
   * @example
   *
   * r.getNewSubreddits().then(console.log)
   * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]
   */


  getNewSubreddits(options) {
    return this._getListing({
      uri: 'subreddits/new',
      qs: options
    });
  }
  /**


  'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emptyChildren = undefined;

var _remove2 = require('lodash/remove');

var _remove3 = _interopRequireDefault(_remove2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _concat2 = require('lodash/concat');

var _concat3 = _interopRequireDefault(_concat2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Promise = require('../Promise.js');

var _Promise2 = _interopRequireDefault(_Promise);

var _helpers = require('../helpers.js');

var _constants = require('../constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var api_type = 'json';

/**
* The `More` class is a helper representing reddit's exposed `more` type in comment threads, used to fetch additional comments
on a thread.
* No instances of the `More` class are exposed externally by snoowrap; instead, comment lists are exposed as Listings.
Additional replies on an item can be fetched by calling `fetchMore` on a Listing, in the same manner as what would be done
with a Listing of posts. snoowrap should handle the differences internally, and expose a nearly-identical interface for the
two use-cases.

Combining reddit's `Listing` and `more` objects has the advantage of having a more consistent exposed interface; for example,
if a consumer iterates over the comments on a Submission, all of the iterated items will actually be Comment objects, so the
consumer won't encounter an unexpected `more` object at the end. However, there are a few disadvantages, namely that (a) this
leads to an increase in internal complexity, and (b) there are a few cases where reddit's `more` objects have different amounts
of available information (e.g. all the child IDs of a `more` object are known on creation), which leads to different optimal
behavior.
*/

var More = class More {
  constructor(options, _r) {
    Object.assign(this, options);
    this._r = _r;
  }
  /* Requests to /api/morechildren are capped at 20 comments at a time, but requests to /api/info are capped at 100, so
  it's easier to send to the latter. The disadvantage is that comment replies are not automatically sent from requests
  to /api/info. */
  fetchMore(options) {
    var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (options.amount <= 0 || startIndex >= this.children.length) {
      return _Promise2.default.resolve([]);
    }
    if (!options.skipReplies) {
      return this.fetchTree(options, startIndex);
    }
    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_INFO_AMOUNT).map(function (id) {
      return 't1_' + id;
    });
    // Requests are capped at 100 comments. Send lots of requests recursively to get the comments, then concatenate them.
    // (This speed-requesting is only possible with comment Listings since the entire list of ids is present initially.)
    var promiseForThisBatch = this._r._getListing({ uri: 'api/info', qs: { id: ids.join(',') } });
    var nextRequestOptions = _extends({}, options, { amount: options.amount - ids.length });
    var promiseForRemainingItems = this.fetchMore(nextRequestOptions, startIndex + ids.length);
    return _Promise2.default.all([promiseForThisBatch, promiseForRemainingItems]).then(_flatten3.default);
  }
  fetchTree(options, startIndex) {
    var _this = this;

    if (options.amount <= 0 || startIndex >= this.children.length) {
      return _Promise2.default.resolve([]);
    }
    var ids = getNextIdSlice(this.children, startIndex, options.amount, _constants.MAX_API_MORECHILDREN_AMOUNT);
    return this._r._get({
      uri: 'api/morechildren',
      qs: { api_type, children: ids.join(','), link_id: this.link_id || this.parent_id }
    }).tap(_helpers.handleJsonErrors).then(function (res) {
      return res.json.data.things;
    }).map(_helpers.addEmptyRepliesListing).then(_helpers.buildRepliesTree).then(function (resultTrees) {
      /* Sometimes, when sending a request to reddit to get multiple comments from a `more` object, reddit decides to only
      send some of the requested comments, and then stub out the remaining ones in a smaller `more` object. ( ¯\_(ツ)_/¯ )
      In these cases, recursively fetch the smaller `more` objects as well. */
      var childMores = (0, _remove3.default)(resultTrees, function (c) {
        return c instanceof More;
      });
      (0, _forEach3.default)(childMores, function (c) {
        c.link_id = _this.link_id || _this.parent_id;
      });
      return _Promise2.default.mapSeries(childMores, function (c) {
        return c.fetchTree(_extends({}, options, { amount: Infinity }), 0);
      }).then(function (expandedTrees) {
        return _this.fetchMore(_extends({}, options, { amount: options.amount - ids.length }), startIndex + ids.length).then(function (nexts) {
          return (0, _concat3.default)(resultTrees, (0, _flatten3.default)(expandedTrees), nexts);
        });
      });
    });
  }
  _clone() {
    return new More((0, _pick3.default)(this, Object.getOwnPropertyNames(this)), this._r);
  }
};

function getNextIdSlice(children, startIndex, desiredAmount, limit) {
  return children.slice(startIndex, startIndex + Math.min(desiredAmount, limit));
}

var emptyChildren = exports.emptyChildren = new More({ children: [] });
exports.default = More;


  * @summary A getter that indicates whether this Listing has any more items to fetch.
  * @type {boolean}
  */
  get isFinished() {
    // The process of checking whether a Listing is 'finished' varies depending on what kind of Listing it is.
    return this._isCommentList
    /* For comment Listings (i.e. Listings containing comments and comment replies, sourced by `more` objects): A Listing is
    *never* finished if it has a cached lookahead (i.e. extra items that were fetched from a previous request). If there is
    no cached lookahead, a Listing is finished iff it has an empty `more` object. */
    ? (0, _isEmpty3.default)(this._cachedLookahead) && !!this._more && (0, _isEmpty3.default)(this._more.children)
    /* For non-comment Listings: A Listing is always finished if it has no URI (since there would be nowhere to fetch items
    from). If it has a URI, a Listing is finished iff its `before` and `after` query are both `null`. This is because reddit
    returns a value of `null` as the `after` and `before` parameters to signify that a Listing is complete.
     It is important to check for `null` here rather than any falsey value, because when an empty Listing is initialized, its
    `after` and `before` properties are both `undefined`, but calling these empty Listings `finished` would be incorrect. */
    : !this._uri || this._query.after === null && this._query.before === null;
  }
  get is_finished() {
    // camel-case alias for backwards-compatibility.
    // As a getter, the `isFinished` property doesn't have an alias like everything else.
    return this.isFinished;
  }
  /**


  * @summary Fetches some more items
  * @param {object} options
  * @param {number} options.amount The number of items to fetch.
  * @param {boolean} [options.skipReplies=false] For a Listing that contains comment objects on a Submission, this option can
  be used to save a few API calls, provided that only top-level comments are being examined. If this is set to `true`, snoowrap
  is able to fetch 100 Comments per API call rather than 20, but all returned Comments will have no fetched replies by default.
  *
  * Internal details: When `skipReplies` is set to `true`, snoowrap uses reddit's `api/info` endpoint to fetch Comments. When
  `skipReplies` is set to `false`, snoowrap uses reddit's `api/morechildren` endpoint. It's worth noting that reddit does
  not allow concurrent requests to the `api/morechildren` endpoint by the same account.
  * @param {boolean} [options.append=true] If `true`, the resulting Listing will contain the existing elements in addition to
  the newly-fetched elements. If `false`, the resulting Listing will only contain the newly-fetched elements.
  * @returns {Promise} A new Listing containing the newly-fetched elements. If `options.append` is `true`, the new Listing will
  also contain all elements that were in the original Listing. Under most circumstances, the newly-fetched elements will appear
  at the end of the new Listing. However, if reverse pagination is enabled (i.e. if this Listing was created with a `before`
  query parameter), then the newly-fetched elements will appear at the beginning. In any case, continuity is maintained, i.e.
  the order of items in the Listing will be the same as the order in which they appear on reddit.
  * @example
  * r.getHot({limit: 25}).then(myListing => {
  *   console.log(myListing.length); // => 25
  *   myListing.fetchMore({amount: 10}).then(extendedListing => {
  *     console.log(extendedListing.length); // => 35
  *   })
  * });
  */
  fetchMore(options) {
    var parsedOptions = (0, _defaults3.default)(typeof options === 'number' ? { amount: options } : (0, _clone3.default)(options),
    // Accept either `skip_replies` or `skipReplies` for backwards compatibility.
    { append: true, skipReplies: options.skip_replies });
    if (typeof parsedOptions.amount !== 'number' || Number.isNaN(parsedOptions.amount)) {
      throw new _errors.InvalidMethodCallError('Failed to fetch Listing. (`amount` parameter was missing or invalid)');
    }
    if (parsedOptions.amount <= 0 || this.isFinished) {
      return this._r._promiseWrap(_Promise2.default.resolve(parsedOptions.append ? this._clone() : this._clone()._empty()));
    }
    if (this._cachedLookahead) {
      var cloned = this._clone();
      cloned.push.apply(cloned, _toConsumableArray(cloned._cachedLookahead.splice(0, parsedOptions.amount)));
      return cloned.fetchMore(parsedOptions.amount - cloned.length + this.length);
    }
    return this._r._promiseWrap(this._more ? this._fetchMoreComments(parsedOptions) : this._fetchMoreRegular(parsedOptions));
  }
  _fetchMoreRegular(options) {
    var _this = this;

    var query = (0, _omitBy3.default)((0, _clone3.default)(this._query), function (value) {
      return value === null || value === undefined;
    });
    if (!this._isCommentList) {
      /* Reddit returns a different number of items per request depending on the `limit` querystring property specified in the
      request. If no `limit` property is specified, reddit returns some number of items depending on the user's preferences
      (currently 25 items with default preferences). If a `limit` property is specified, then reddit returns `limit` items per
      batch. However, this is capped at 100, so if a `limit` larger than 100 items is specified, reddit will only return 100
      items in the batch. (The cap of 100 could plausibly change to a different amount in the future.)
       However, one caveat is that reddit's parser doesn't understand the javascript `Infinity` global. If `limit=Infinity` is
      provided in the querystring, reddit won't understand the parameter so it'll just act as if no parameter was provided, and
      will return 25 items in the batch. This is suboptimal behavior as far as snoowrap is concerned, because it means that 4
      times as many requests are needed to fetch the entire listing.
       To get around the issue, snoowrap caps the `limit` property at Number.MAX_SAFE_INTEGER when sending requests. This ensures
      that `Infinity` will never be sent as part of the querystring, so reddit will always return the maximal 100 items per
      request if the desired amount of items is large. */
      query.limit = Math.min(options.amount, Number.MAX_SAFE_INTEGER);
    }
    return this._r.oauthRequest({
      uri: this._uri,
      qs: query,
      method: this._method
    }).then(this._transform).then(function (response) {
      var cloned = _this._clone();
      if (!options.append) {
        cloned._empty();
      }
      if (cloned._query.before) {
        cloned.unshift.apply(cloned, _toConsumableArray(response));
        cloned._query.before = response._query.before;
        cloned._query.after = null;
      } else {
        cloned.push.apply(cloned, _toConsumableArray(response));
        cloned._query.before = null;
        cloned._query.after = response._query.after;
      }
      if (_this._isCommentList) {
        cloned._more = cloned._more || response._more || _More.emptyChildren;
        if (response.length > options.amount) {
          cloned._cachedLookahead = Array.from(cloned.splice(options.amount));
        }
      }
      return cloned.fetchMore(_extends({}, options, { append: true, amount: options.amount - response.length }));
    });
  }
  /* Pagination for comments works differently than it does for most other things; rather than sending a link to the next page
  within a Listing, reddit sends the last comment in the list as as a `more` object, with links to all the remaining comments
  in the thread. */
  _fetchMoreComments(options) {
    var _this2 = this;

    return this._more.fetchMore(options).then(function (moreComments) {
      var cloned = _this2._clone();
      if (!options.append) {
        cloned._empty();
      }
      cloned.push.apply(cloned, _toConsumableArray(moreComments));
      cloned._more.children = cloned._more.children.slice(options.amount);
      return cloned;
    });
  }
  /**
  * @summary Fetches all of the items in this Listing, only stopping when there are none left.
  * @param {object} [options] Fetching options -- see {@link Listing#fetchMore}
  * @returns {Promise} A new fully-fetched Listing. Keep in mind that this method has the potential to exhaust your
  ratelimit quickly if the Listing doesn't have a clear end (e.g. with posts on the front page), so use it with discretion.
  * @example
  *
  * r.getMe().getUpvotedContent().fetchAll().then(console.log)
  * // => Listing [ Submission { ... }, Submission { ... }, ... ]
  */
  fetchAll(options) {
    return this.fetchMore(_extends({}, options, { amount: Infinity }));
  }
  fetchUntil(options) {
    this._r._warn('Listing#fetchUntil is deprecated -- use Listing#fetchMore instead.');
    return this.fetchMore(_extends({}, options, { append: true, amount: options.length - this.length }));
  }
  _clone() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$deep = _ref.deep,
        deep = _ref$deep === undefined ? false : _ref$deep;

    var properties = (0, _pick3.default)(this, Object.keys(INTERNAL_DEFAULTS));
    properties._query = (0, _clone3.default)(properties._query);
    properties._cachedLookahead = (0, _clone3.default)(properties._cachedLookahead);
    properties._more = this._more && this._more._clone();
    var shallowChildren = Array.from(this);
    properties.children = deep ? shallowChildren.map(function (item) {
      return '_clone' in item && typeof item._clone === 'function' ? item._clone({ deep }) : item;
    }) : shallowChildren;
    return new Listing(properties, this._r);
  }
  _setMore(moreObj) {
    this._more = moreObj;
    this._isCommentList = true;
  }
  _empty() {
    this.splice(0, this.length);
    return this;
  }
  toJSON() {
    return Array.from(this).map(function (item) {
      return item && item.toJSON ? item.toJSON() : item;
    });
  }
};

(0, _helpers.defineInspectFunc)(Listing.prototype, function () {
  return 'Listing ' + _util2.default.inspect(Array.from(this));
});

exports.default = Listing;


 * @summary Fetches this content from reddit.
  * @desc This will not mutate the original content object; all Promise properties will remain as Promises after the content has
  * been fetched. However, the information on this object will be cached, so it may become out-of-date with the content on
  * reddit. To clear the cache and fetch this object from reddit again, use `refresh()`.
  *
  * If snoowrap is running in an environment that supports ES2015 Proxies (e.g. Chrome 49+), then `fetch()` will get
  * automatically called when an unknown property is accessed on an unfetched content object.
  * @returns {Promise} A version of this object with all of its fetched properties from reddit. This will not mutate the
  object. Once an object has been fetched once, its properties will be cached, so they might end up out-of-date if this
  function is called again. To refresh an object, use refresh().
  * @example
  *
  * r.getUser('not_an_aardvark').fetch().then(userInfo => {
  *   console.log(userInfo.name); // 'not_an_aardvark'
  *   console.log(userInfo.created_utc); // 1419104352
  * });
  *
  * r.getComment('d1xchqn').fetch().then(comment => comment.body).then(console.log)
  * // => 'This is a little too interesting for my liking'
  *
  * // In environments that support ES2015 Proxies, the above line is equivalent to:
  * r.getComment('d1xchqn').body.then(console.log);
  * // => 'This is a little too interesting for my liking'
  */
  fetch() {
    var _this = this;

    if (!this._fetch) {
      this._fetch = this._r._promiseWrap(this._r._get({ uri: this._uri }).then(function (res) {
        return _this._transformApiResponse(res);
      }));
    }
    return this._fetch;
  }


   * @summary Refreshes this content.
  * @returns {Promise} A newly-fetched version of this content
  * @example
  *
  * var someComment = r.getComment('cmfkyus');
  * var initialCommentBody = some_comment.fetch().then(comment => comment.body);
  *
  * setTimeout(() => {
  *   someComment.refresh().then(refreshedComment => {
  *     if (initialCommentBody.value() !== refreshedComment.body) {
  *       console.log('This comment has changed since 10 seconds ago.');
  *     }
  *   });
  * }, 10000);
  */
  refresh() {
    this._fetch = null;
    return this.fetch();
  }


   * @summary Upvotes this Comment or Submission.
  * @returns {Promise} A Promise that fulfills with this Comment/Submission when the request is complete
  * @desc **Note: votes must be cast by humans.** That is, API clients proxying a human's action one-for-one are OK,
  but bots deciding how to vote on content or amplifying a human's vote are not. See the
  [reddit rules](https://reddit.com/rules) for more details on what constitutes vote cheating. (This guideline is quoted from
  [the official reddit API documentation page](https://www.reddit.com/dev/api#POST_api_vote).)
  * @example r.getSubmission('4e62ml').upvote()
  */
  upvote() {
    return this._vote(1);
  }
  /**
  * @summary Downvotes this Comment or Submission.
  * @returns {Promise} A Promise that fulfills with this Comment/Submission when the request is complete.
  * @desc **Note: votes must be cast by humans.** That is, API clients proxying a human's action one-for-one are OK, but
  bots deciding how to vote on content or amplifying a human's vote are not. See the [reddit rules](https://reddit.com/rules)
  for more details on what constitutes vote cheating. (This guideline is quoted from
  [the official reddit API documentation page](https://www.reddit.com/dev/api#POST_api_vote).)
  * @example r.getSubmission('4e62ml').downvote()
  */
  downvote() {
    return this._vote(-1);
  }
  /**
  * @summary Removes any existing vote on this Comment or Submission.
  * @returns {Promise} A Promise that fulfills with this Comment/Submission when the request is complete.
  * @desc **Note: votes must be cast by humans.** That is, API clients proxying a human's action one-for-one are OK, but
  bots deciding how to vote on content or amplifying a human's vote are not. See the [reddit rules](https://reddit.com/rules)
  for more details on what constitutes vote cheating. (This guideline is quoted from
  [the official reddit API documentation page](https://www.reddit.com/dev/api#POST_api_vote).)
  * @example r.getSubmission('4e62ml').unvote()
  */
  unvote() {
    return this._vote(0);
  }
  /**
  * @summary Saves this Comment or Submission (i.e. adds it to the list at reddit.com/saved)
  * @returns {Promise} A Promise that fulfills when the request is complete
  * @example r.getSubmission('4e62ml').save()
  */
  save() {
    return this._post({ uri: 'api/save', form: { id: this.name } }).return(this);
  }
  /**
  * @summary Unsaves this item
  * @returns {Promise} A Promise that fulfills when the request is complete
  * @example r.getSubmission('4e62ml').unsave()
  */
  unsave() {
    return this._post({ uri: 'api/unsave', form: { id: this.name } }).return(this);
  }
  /**

   @summary Creates a new subreddit.
  * @param {object} options
  * @param {string} options.name The name of the new subreddit
  * @param {string} options.title The text that should appear in the header of the subreddit
  * @param {string} options.public_description The text that appears with this subreddit on the search page, or on the
  blocked-access page if this subreddit is private. (500 characters max)
  * @param {string} options.description The sidebar text for the subreddit. (5120 characters max)
  * @param {string} [options.submit_text=''] The text to show below the submission page (1024 characters max)
  * @param {boolean} [options.hide_ads=false] Determines whether ads should be hidden on this subreddit. (This is only
  allowed for gold-only subreddits.)
  * @param {string} [options.lang='en'] The language of the subreddit (represented as an IETF language tag)
  * @param {string} [options.type='public'] Determines who should be able to access the subreddit. This should be one of
  `public, private, restricted, gold_restricted, gold_only, archived, employees_only`.
  * @param {string} [options.link_type='any'] Determines what types of submissions are allowed on the subreddit. This should
  be one of `any, link, self`.
  * @param {string} [options.submit_link_label=undefined] Custom text to display on the button that submits a link. If
  this is omitted, the default text will be displayed.
  * @param {string} [options.submit_text_label=undefined] Custom text to display on the button that submits a selfpost. If
  this is omitted, the default text will be displayed.
  * @param {string} [options.wikimode='modonly'] Determines who can edit wiki pages on the subreddit. This should be one of
  `modonly, anyone, disabled`.
  * @param {number} [options.wiki_edit_karma=0] The minimum amount of subreddit karma needed for someone to edit this
  subreddit's wiki. (This is only relevant if `options.wikimode` is set to `anyone`.)
  * @param {number} [options.wiki_edit_age=0] The minimum account age (in days) needed for someone to edit this subreddit's
  wiki. (This is only relevant if `options.wikimode` is set to `anyone`.)
  * @param {string} [options.spam_links='high'] The spam filter strength for links on this subreddit. This should be one of
  `low, high, all`.
  * @param {string} [options.spam_selfposts='high'] The spam filter strength for selfposts on this subreddit. This should be
  one of `low, high, all`.
  * @param {string} [options.spam_comments='high'] The spam filter strength for comments on this subreddit. This should be one
  of `low, high, all`.
  * @param {boolean} [options.over_18=false] Determines whether this subreddit should be classified as NSFW
  * @param {boolean} [options.allow_top=true] Determines whether the new subreddit should be able to appear in /r/all and
  trending subreddits
  * @param {boolean} [options.show_media=false] Determines whether image thumbnails should be enabled on this subreddit
  * @param {boolean} [options.show_media_preview=true] Determines whether media previews should be expanded by default on this
  subreddit
  * @param {boolean} [options.allow_images=true] Determines whether image uploads and links to image hosting sites should be
  enabled on this subreddit
  * @param {boolean} [options.exclude_banned_modqueue=false] Determines whether posts by site-wide banned users should be
  excluded from the modqueue.
  * @param {boolean} [options.public_traffic=false] Determines whether the /about/traffic page for this subreddit should be
  viewable by anyone.
  * @param {boolean} [options.collapse_deleted_comments=false] Determines whether deleted and removed comments should be
  collapsed by default
  * @param {string} [options.suggested_comment_sort=undefined] The suggested comment sort for the subreddit. This should be
  one of `confidence, top, new, controversial, old, random, qa`.If left blank, there will be no suggested sort,
  which means that users will see the sort method that is set in their own preferences (usually `confidence`.)
  * @param {boolean} [options.spoilers_enabled=false] Determines whether users can mark their posts as spoilers
  * @returns {Promise} A Promise for the newly-created subreddit object.
  * @example
  *
  * r.createSubreddit({
  *   name: 'snoowrap_testing2',
  *   title: 'snoowrap testing: the sequel',
  *   public_description: 'thanks for reading the snoowrap docs!',
  *   description: 'This text will go on the sidebar',
  *   type: 'private'
  * }).then(console.log)
  * // => Subreddit { display_name: 'snoowrap_testing2' }
  * // (/r/snoowrap_testing2 created on reddit)
  */



  getPopularSubreddits(options) {
    return this._getListing({ uri: 'subreddits/popular', qs: options });
  }
  /**
  * @summary Gets a list of subreddits, arranged by age.
  * @param {object} [options] Options for the resulting Listing
  * @returns {Promise} A Listing containing Subreddits
  * @example
  *
  * r.getNewSubreddits().then(console.log)
  * // => Listing [ Subreddit { ... }, Subreddit { ... }, ...]
  */
  getNewSubreddits(options) {
    return this._getListing({ uri: 'subreddits/new', qs: options });
  }
  /**